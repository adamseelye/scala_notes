- What is Git?
Git is a mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel.
- What about GitHub? How are they related?
https://github.com/
- What command moves changes from GitHub to our local repo?
	git pull

- What command moves changes from our local repo to GitHub?
	git push

- What two commands are used in sequence to save changes to our local repo?
	git add .
	git commit -m "comment"

- What is the JDK and what does it let us do?
	JDK stands for Java Development Kit and it is a software environment that
	enables development of Java software applications.

- What is the JRE and what does it let us do?
	JRE stands for Java Runtime Environment and it is a software layer
	running on top of the computer's OS, similar in a way to a virtual machine.
	The JRE provides the libraries required to run Java applications.

- What's the name for the code written in .class files?
	Bytecode. .CLASS files are generated by compiling Java source code files,
	and then these files are loaded into the JVM (Java Virtual Machine) at
	runtime to execute the application. Scala code is compiled into .class
	files just as Java is.

- How does Scala relate to Java?
	Scala inherits Java's object-oriented model and builds upon it. It may
	almost be thought of as a Java library instead of a separate language,
	but there are key differences between the two that manifest as different
	strengths and weaknesses in different situations. For instance, a Scala
	variable is immutable by default, while Java variables are not.

- What is sbt (high level)?
	sbt is a source building tool created specifically for Scala. sbt compiles
	a "build.sbt" file which contains information on the project directory
	structure (which has to be specific: src/main/scala) as well as information
	on the name of the Scala file(s) to run, the version, and the Scala
	version of the environment. sbt downloads any additional sources that are
	required and also builds out other source files to be used for the project.
	As soon as building is finished, the Scala program may be run.

- How does Scala relate to the JRE and JVM?
	Scala runs in the JRE on the JVM, just as Java does. Java and Scala code
	may even be run concurrently in the same JVM instance.

- Is Scala statically or dynamically typed?
	Scala is statically typed - this means that variables are explicitly 
	defined and are determined at compile time instead of runtime.

- Do we need to declare type for our variables in Scala? always?
	No, though there are instances when declaring a type may be desirable
	for readability of code. Though the variable type isn't explicitly defined
	in Scala by the developer, the type is determined at compile time and
	may not be altered after definition.

- What are integer types in Scala?
	Scala integer types include: Byte, Int, Short, Long

- Decimal types?
	Decimal types in Scala are Float and Double

- What is the size of an Int? a Double? (the default integer and decimal types)
	An Int is a 32 bit signed value, a Double is a 64 bit signed value.

- What is the difference between val and var?
	val is immutable; var is mutable (changeable).

- Why do we make use of programming paradigms like Functional Programming and Object Oriented Programming?
	Each style supports a different set of features. In my opinion, differing use of
	control flow is one of the main reasons to make use of each paradigm. Object
	Oriented Programming works well for Scala because many times a certain operation
	or set of operations needs to be performed on data that is constantly changing.
	Functional Programming works well for a service's back-end; the amount of 
	inputs to a system will increase much slower relative to the amount and
	complexity of operations performed on the system over time.

- What are the 4 pillars of OOP: Abstraction, Encapsulation, Inheritance, Polymorphism? (a bit on each)
	Abstraction: 	Abstraction is the process of abstracting away the details of
			a program to present a simpler form. If we had a Car() function,
			with an engine(), pistons(), axle(), steering_wheel(), and pedal()
			functions, we would present the abstract Car() to the user
			as only containing the steering_wheel() and pedal() functions
			as the user doesn't need to know how to turn the axle().

	Encapsulation: 	Encapsulation is the process of hiding the details of a program
			from other parts of the program. Using the above example, 
			we would make the pistons() function private
			to the engine, as there is no need for the steering_wheel()
			to access the pistons(). Encapsulation helps guard against
			interference from other parts of the program or malicious
			activity.

	Inheritance:	In short, an object acquires the properties of another object.
			It is useful when altering objects; an object may be 
			created with slightly different properties from the base class
			while preserving the properties of the base class. It is also
			useful for reusing code without the need to repeat lines.

	Polymorphism:	Polymorphism basically means "many forms". The above example
			of an inherited child class exhibiting different properties from 
			the base class is also an example of polymorphism; the child
			inherits the form of the parent and then changes form.

- What are classes? Objects?
	A class is a definition of an object; it may also be thought of as a blueprint.
	A class only exists as abstract code until it is instantiated as an object.
	An object is an implementation (or instantiation) of a class, and it is an
	actual entity in computer memory that may be called to perform whichever method
	is defined in its class.

- What is the significance of the Any class in Scala?
	The Any class is the super class (or parent) of all other classes in Scala. Scala
	is a hierarchical language, at least in the context of classes; all varieties of
	classes in Scala inherit in some manner from the Any class. The Any class may 
	return any data type.

- What does it mean that functions are first class citizens in Scala?
	Functions may be passed as values to other functions. Conversely, in C: function
	pointers may be passed as values, the return values may be passed as values in
	functions, but not dynamically-defined functions within the code. Scala allows
	entire functions to be passed into the inputs of other functions, similar to 
	Java (post version 8).

- What is a pure function?/What is a side effect?
	A pure function is that which always returns the same result for an argument.
	An example is the Add function; it is expected 100% of the time to return the
	result of "4" when the operation is "2+2". In addition, the Add function
	does not need to modify global variables or other functions. A side effect
	of a function is the modifying of variables/functions outside of its base
	operation. For example, if we had x = x + 2, the side effect would be the
	modifying of the variable x because it's value is changed every time the
	operation is executed.

- What's the difference between an expression and a statement?
	An expression is to be evaluated; a statement is a setting of a state. 
	x = x + 2 is an expression because the math operation of adding 2 is completed
	before setting the value of the variable x. x = ("String") is a statement
	because there are no evaluation operations executed; the value of x is
	set to "String" at the beginning with no further changes.

- What's the difference between a while loop and a do-while loop?
	A while loop will evaluate if the condition is true. A do-while loop will always
	evaluate at least once even if the condition never returned true.

- How does String interpolation work in Scala?
	Similar to python but there are a couple more characters we can use to define
	an interpolated string (There are s, f, and raw while python has f). To print
	a string literal, define the variable to replace part of the string, define
	the interpolated string, and then define the location in the string by using
	$<variable name>.

- How do operators work in Scala?  Where is "+" defined?
	There are a number of operators within Scala. Some are math functions (like "+")
	and there are also relational operators (i.e. equal to), logical operators, and
	bitwise operators (perform operations on bits instead of characters). "+" is
	defined as an Arithmetic function alongside subtraction, multiplication/division,
	modulus, and exponents. "+" may also be used as a concatenation operator.

- How do we define an auxiliary constructor?
	An auxiliary constructor is any constructor that is not the primary constructor.
	To define an aux constructor, use the "this" keyword:
		def this(var1: String, var2: String, var3: Int)
			{this(var1, var2) this(var3)}

- What is a REPL?
	A REPL is a sort of command line interface to an interpreter, like the Java
	or Python interpreters; Scala has one too. REPL stands for "Read, Evaluate, Print, Loop"
	and a REPL may be used to interact with and run commands on a given interpreter.

- How does the Scala REPL store the results of evaluated expressions?
	The Scala REPL stores results of expressions in variables within the Interpreter
	memory. Results are able to be called until either the REPL is reset or closed.

- What is a higher order function?
	A higher-order function is a function which takes other functions as inputs, or may 
	also output a function.

- Why might we want to write an application using pure functions instead of impure functions?
	A pure function is useful when the result of a function is required to be the same,
	i.e. static. Think of an arithmetic squaring function. If the function was impure,
	the output would be squared for each time the function was executed in the example
	above. An arithmetic function that returns different output from the same input is
	not a function at all.

- Why might we want mutable state (OOP) in our application?  Why might we want immutable state (FP)?
  - This question is open-ended, don't focus on finding the "right" answer
	We would want to use mutable-state entities if we were working with values and inputs
	that are not static. In a social media app, it is vital to be able to change which
	user is logged in. An immutable state is useful in cases where a value or state
	is required to stay the same over time. An example of an immutable state is a session
	ID for a web browser; the ID should stay the same regardless of what the user is doing
	(unless logging out) so that the user can stay logged in and access the service.

- What are some examples of side effects?
	Some examples of Scala side effects include state mutations, printing to the console
	or I/O stream, or even calling another impure function.

- What is a Lambda?
	An anonymous function (unnamed). It is usually used to apply a function over a
	collection of values. For example, in a list of integers, a Lambda defined as
	(x: Int) => x + x would return a list of each but doubled.

- How can we write Lambdas in Scala?
	See above.

- What does map do?
	The map() function applies an expression over the values in a collection (such as a List).
	
	Map:
	A Scala Map is a collection of key-value pairs, similar to a dictionary in python.
	Keys must be unique while that is not required for values. May have any data type
	though must remain consistent once defined. Either mutable or immutable, default
	immutable.

- What does filter do?
	A List filter selects elements of a list that satisify a predicate; i.e. _ < 5

- What does it mean that a function returns Unit in Scala?
	A Unit is a data type in Scala. It is synonymous with Java "void". Unit does not
	return any value or function. It is useful when defining a function that doesn't
	return anything.

- Know the basics of the following Scala Collections: (mutable? indexed? when to use it?)
  - List: immutable, indexed; array of same-type elements, i.e. a list of names. 

  - Set: both mutable and immutable (default immutable), indexed. Different type elements.
  	 Hold strings, arrays, other sets. Use when passing different data types into a
	 variable.
 
  - Map: collection of key-value pairs (like python dictionary). Keys unique, values not.
  	 Any data type, though must be consistent once defined. Map values to other
	 values, like a name to an id key. Mutable.
 
  - ArrayBuffer: ArrayBuffer is used to change the number of elements of an array.
  		 Checks size of array then creates new larger array if needed.
		 Mutable.

  - Vector: immutable data structure. Provides random access to elements. May use Vector
  	    to perform operations such as reverse and sort reliably.

- What are Exceptions?
	The program has encountered an irreconcilable error and so throws an exception;
	many times, the program will quit if an exception is caught.

- What are Errors?
	Errors take many forms but for some reason or another are problems that arise
	in code preventing its execution as intended. For example, in coding languages
	like Scala, the IDE used to build the program will throw an error if something
	is wrong and usually prevent the program from being built and/or running unless
	it is corrected.

- What is Throwable?
	Throwable is a keyword used to explicitly throw an exception in Scala, even if
	there are no actual errors in the code. It is useful for debugging and preventing
	code completion if there are code errors.
	Syntax: throw new <exception name>

- How would we write code that handles a thrown Exception?
	Using a catch block with a case (or cases) defined.
	A case will use fat arrow notation to define the
	action to take.

	catch {
	    case i: IOException => { println("Something is terribly wrong") }
	    case a: ArithmeticException => { println("Please go back to school") }
	}

- How do we write code to throw an Exception?
	if (2 + 2 = 4)
	    throw new ArithmeticException("2 + 2 equals 5")
	else println("something isn't right here")

- What does the src folder contain in an sbt project?
	The src folder contains the main and test source subfolders.

- What is a case class?-->explore
	Just like a class can instantiate objects, a case class is used to instantiate
	case objects as defined in the case class. A case class can also have objects
	defined	within; methods may be executed from the case object when conditions
	are satisfied. It is similar to a normal class in that regard. Serializable.

- What methods get generated when we declare a case class?-->explore
	A method with the same name and same number of parameters as the class is
	generated - this is without using the keyword new.

- What does the apply method do?-->explore
	It applies a function to a value. For example, if x + x was the function,
	and 2 was the value, we could use the apply method with the function and
	value to get the result of 4.

- What is a Thread?-->explore
	A thread, basically, is a I/O and execution stream of a CPU. Values,
	functions, whatever; all get passed in, executions are performed, and then
	out goes a stream of data to the rest of the computer. Many CPUs are multi-
	threaded or multi-cored which means that many I/O execution streams may be
	processing in parallel.

- In what situations might we want to use multiple threads? (just some)-->explore
	In any application that requires large amounts of simple computations.
	Examples are database queries and video games and websites.
	Java and Scala are natively single-threaded though may make use of 
	multithreading.
