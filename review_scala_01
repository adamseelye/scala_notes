- What is Git?
Git is a mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel.
- What about GitHub? How are they related?
https://github.com/
- What command moves changes from GitHub to our local repo?
	git pull

- What command moves changes from our local repo to GitHub?
	git push

- What two commands are used in sequence to save changes to our local repo?
	git commit
	git push

- What is the JDK and what does it let us do?
	JDK stands for Java Development Kit and it is a software environment that
	enables development of Java software applications.

- What is the JRE and what does it let us do?
	JRE stands for Java Runtime Environment and it is a software layer
	running on top of the computer's OS, similar in a way to a virtual machine.
	The JRE provides the libraries required to run Java applications.

- What's the name for the code written in .class files?
	Bytecode. .CLASS files are generated by compiling Java source code files,
	and then these files are loaded into the JVM (Java Virtual Machine) at
	runtime to execute the application. Scala code is compiled into .class
	files just as Java is.

- How does Scala relate to Java?
	Scala inherits Java's object-oriented model and builds upon it. It may
	be almost be thought of as a Java library instead of a separate language,
	but there are key differences between the two that manifest as different
	strengths and weaknesses in different situations. For instance, a Scala
	variable is immutable by default, while Java variables are not.

- What is sbt (high level)?
	sbt is a source building tool created specifically for Scala. sbt builds
	a "build.sbt" file which contains information on the project directory
	structure (which has to be specific: src/main/scala) as well as information
	on the name of the Scala file(s) to run, the version, and the Scala
	version of the environment. sbt downloads any additional sources that are
	required and also builds out other source files to be used for the project.
	As soon as building is finished, the Scala program may be run.

- How does Scala relate to the JRE and JVM?
	Scala runs in the JRE on the JVM, just as Java does. Java and Scala code
	may even be run concurrently in the same JVM instance.

- Is Scala statically or dynamically typed?
	Scala is statically typed.

- Do we need to declare type for our variables in Scala? always?
	No, though there are instances when declaring a type may be desirable
	for readability of code.

- What are integer types in Scala?
	Scala integer types include: Int, Long, Float, and Double

- Decimal types?
	Decimal types in Scala are of either the Float, Double, or Long types.

- What is the size of an Int? a Double? (the default integer and decimal types)
	An Int is a 32 bit signed value, a Double is a 64 bit signed value.

- What is the difference between val and var?
	val is immutable; var is mutable (changeable).

- Why do we make use of programming paradigms like Functional Programming and Object Oriented Programming?
	Each style supports a different set of features. In my opinion, differing use of
	control flow is one of the main reasons to make use of each paradigm. Object
	Oriented Programming works well for Scala because many times a certain operation
	or set of operations needs to be performed on data that is constantly changing.
	Functional Programming works well for a service's back-end; the amount of 
	inputs to a system will increase much slower relative to the amount and
	complexity of operations performed on the system over time.

- What are the 4 pillars of OOP: Abstraction, Encapsulation, Inheritance, Polymorphism? (a bit on each)
	Abstraction: 	Abstraction is the process of abstracting away the details of
			a program to present a simpler form. If we had a Car() function,
			with an engine(), pistons(), axle(), steering_wheel(), and pedal()
			functions, we would present the abstract Car() to the user
			as only containing the steering_wheel() and pedal() functions
			as the user doesn't need to know how to turn the axle().

	Encapsulation: 	Encapsulation is the process of hiding the details of a program
			from other parts of the program. Using the above example, 
			we would make the pistons() function private
			to the engine, as there is no need for the steering_wheel()
			to access the pistons().

- What are classes? Objects?
- What is the significance of the Any class in Scala?
- What does it mean that functions are first class citizens in Scala?
- What is a pure function?/What is a side effect?
- What's the difference between an expression and a statement?
- What's the difference between a while loop and a do-while loop?
- How does String interpolation work in Scala?
- How do operators work in Scala?  Where is "+" defined?
- How do we define an auxiliary constructor?
- What is a REPL?
- How does the Scala REPL store the results of evaluated expressions?
- What is a higher order function?
- Why might we want to write an application using pure functions instead of impure functions?
- Why might we want mutable state (OOP) in our application?  Why might we want immutable state (FP)?
  - This question is open-ended, don't focus on finding the "right" answer
- What are some examples of side effects?
- What is a Lambda?
- How can we write Lambdas in Scala?
- What does map do?
- What does filter do?
- What does it mean that a function returns Unit in Scala?
- Know the basics of the following Scala Collections: (mutable? indexed? when to use it?)
  - List
  - Set
  - Map
  - ArrayBuffer
  - Vector
- What are Exceptions?
- What are Errors?
- What is Throwable?
- How would we write code that handles a thrown Exception?
- How do we write code to throw an Exception?

- What does the src folder contain in an sbt project?
- What is a case class?-->explore
- What methods get generated when we declare a case class?-->explore
- What does the apply method do?-->explore
- What is a Thread?-->explore
- In what situations might we want to use multiple threads? (just some)-->explore



